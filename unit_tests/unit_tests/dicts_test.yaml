suite: library/dictionaries unit tests
tests:

  ## Dictionary (Get)
  
  - it: "[Dicts | Get]: Functionality (Primitive Type)"
    templates:
    - dicts/get.yaml
    values:
      - ./values/dicts/base.yaml
    set: 
      path: "spec.minReadySeconds"
    asserts:
      - matchSnapshot: {}

  - it: "[Dicts | Get]: Functionality (Map Type)"
    templates:
    - dicts/get.yaml
    values:
      - ./values/dicts/base.yaml
    set: 
      path: "spec.selector"
    asserts:
      - matchSnapshot: {}

  - it: "[Dicts | Get]: Functionality (Slice Type)"
    templates:
    - dicts/get.yaml
    values:
      - ./values/dicts/base.yaml
    set: 
      path: "spec.template.spec.containers"
    asserts:
      - matchSnapshot: {}

  - it: "[Dicts | Get]: Non Existent Path"
    templates:
    - dicts/get.yaml
    values:
      - ./values/dicts/base.yaml
    set: 
      path: "spec.nonExistent"
    asserts:
      - matchSnapshot: {}

  ## Dictionary (Set)

  - it: "[Dicts | Set]: Functionality (Primitive Type)"
    templates:
    - dicts/set.yaml
    values:
      - ./values/dicts/base.yaml
    set: 
      path: "spec.minReadySeconds"
      value: 10000
    asserts:
      - matchSnapshot: {}

  - it: "[Dicts | Set]: Functionality Recursive (Primitive Type)"
    templates:
    - dicts/set.yaml
    values:
      - ./values/dicts/base.yaml
    set: 
      path: "spec.subelement.new-element"
      value: "new-value"
    asserts:
      - matchSnapshot: {}

  - it: "[Dicts | Set]: Functionality Recursive (Slice Type)"
    templates:
    - dicts/set.yaml
    values:
      - ./values/dicts/base.yaml
    set: 
      path: "spec.subelement.new-element"
      value: 
        - element_1
        - element_2
    asserts:
      - matchSnapshot: {}

  - it: "[Dicts | Set]: Functionality Recursive (Map Type)"
    templates:
    - dicts/set.yaml
    values:
      - ./values/dicts/base.yaml
    set: 
      path: "spec.subelement.newElement"
      value: 
        some:
          map: "data"
        new:
          test: "value"
    asserts:
      - matchSnapshot: {}



  - it: "[Dicts | Set]: Functionality Recursive (Empty Data)"
    templates:
    - dicts/set.yaml
    values:
      - ./values/dicts/base.yaml
    set: 
      path: "spec.subelement.new-element"
      value: {}
    asserts:
      - matchSnapshot: {}      


  ## Check Dictionary Functions
#
#  - it: "[Dicts | Merge]: List Inject"
#    set:
#      Base:
#        spec:
#          selector:
#            app: nginx
#          ports:
#          - port: 80
#            name: http
#            targetPort: 80
#          - port: 443
#            name: https
#            targetPort: 80
#      Data:
#        spec:
#          ports:
#          - __inject__
#          - port: 8443
#            name: https
#          - port: 10000
#            name: metrics
#            targetPort: 9001
#    asserts:
#      - matchSnapshot: {}
#
#  - it: "[Dicts | Merge]: Merge Key"
#    set:
#      unit_test: 
#        chart: "library"
#        type: "dict.merge"
#      Base:
#        spec:
#          selector:
#            app: nginx
#          ports:
#          - port: 80
#            name: http
#            targetPort: 80
#          - port: 8443
#            name: https
#            targetPort: 80
#          - port: 9999
#            name: base_port
#            targetPort: 9999
#      Data:
#        spec:
#          ports:
#          - __inject__
#          - ((port))
#          - port: 8443
#            name: https_metrics
#            targetPort: 8443
#          - port: 80
#            name: http_port
#            targetPort: 80
#          - port: 8888
#            name: custom_port
#            targetPort: 8888
#    asserts:
#      - matchSnapshot: {}
#
#