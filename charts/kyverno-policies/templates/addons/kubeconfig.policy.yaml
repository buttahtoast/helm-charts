{{- $request_type := printf "request.object.metadata.annotations.\"%s\"" (include "kyverno-policies.kubeconfigs.type" $) -}}
{{- $request_name := printf "request.object.metadata.annotations.\"%s\"" (include "kyverno-policies.kubeconfigs.name" $) -}}
{{- $request_namespace := printf "request.object.metadata.annotations.\"%s\"" (include "kyverno-policies.kubeconfigs.namespace" $) -}}
{{- $request_secret_key := printf "request.object.metadata.annotations.\"%s\"" (include "kyverno-policies.kubeconfigs.key" $) -}}

{{/* PreConditions for any generator */}}
{{- define "internal.kubeconfigs.preconditions" -}}
- key: {{ include "kyverno-policies.printTpl" (printf "%s || ''" (printf "request.object.metadata.labels.\"%s\"" (include "kyverno-policies.kubeconfigs.use" $))) }}
  operator: Equals
  value: "{{ $.Values.global.enabledValue }}"
{{- end -}}

{{- define "internal.kubeconfigs.generator-preconditions" -}}
{{- include "internal.kubeconfigs.preconditions" $ | nindent 0 }}
- key: {{ include "kyverno-policies.printTpl" "request.object.type" }}
  operator: Equals
  value: "kubernetes.io/service-account-token"
{{- end -}}

{{- with $cfgs := $.Values.policies.kubeconfigs -}}
  {{- if .enabled }}
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: kubeconfig-generator
  annotations:
    {{- with .meta.title }}
    policies.kyverno.io/title: {{ . | quote }}
    {{- end }}
    {{- with .meta.category }}
    policies.kyverno.io/category: {{ . | quote }}
    {{- end }}
    {{- with .meta.subject }}
    policies.kyverno.io/subject: {{ . | quote }}
    {{- end }}
    policies.kyverno.io/description: >-
      Creates Kubeconfigs based on ServiceAccount Tokens. Kubeconfigs can then be used by other
      tools for their access (eg. ArgoCD, FluxCD, etc.)
spec:
  generateExistingOnPolicyUpdate:  {{ default .generateExistingOnPolicyUpdate $.Values.global.config.generateExistingOnPolicyUpdate }}
  background: false
  rules:
  {{- if $cfgs.allowServiceAccounts }}
  # Based on ServiceAccount Create token
  - name: static-token-generator
    preconditions:
      all: 
        {{- include "internal.kubeconfigs.preconditions" $ | nindent 8 }}
    match:
      any:
      - resources:
          kinds:
          - "ServiceAccount"
    generate:
      synchronize: {{ $cfgs.synchronize }}
      apiVersion: v1
      kind: Secret
      name: {{ include "kyverno-policies.printTpl" "join('-', [request.object.metadata.name,'config-token'])" }}
      namespace: {{ include "kyverno-policies.printTpl" "request.object.metadata.namespace" }}
      data:
        type: kubernetes.io/service-account-token
        metadata:
          labels:
            {{ include "kyverno-policies.kubeconfigs.use" $ }}: {{ $.Values.global.enabledValue | quote }}
            {{ include "kyverno-policies.kubeconfigs.type" $ }}: {{ include "kyverno-policies.printTpl" (printf "%s || ''" $request_type) }}
          annotations:
            kubernetes.io/service-account.name: {{ include "kyverno-policies.printTpl" "request.object.metadata.name" }}
            {{ include "kyverno-policies.kubeconfigs.name" $ }}: {{ include "kyverno-policies.printTpl" (printf "%s || ''" $request_name) }}
            {{ include "kyverno-policies.kubeconfigs.namespace" $ }}: {{ include "kyverno-policies.printTpl" (printf "%s || ''" $request_namespace) }}
            {{ include "kyverno-policies.kubeconfigs.key" $ }}: {{ include "kyverno-policies.printTpl" (printf "%s || ''" $request_secret_key) }}
  {{- end }}

  # Create Kubeconfigs based on ServiceAccount Token Secrets
  {{- if $cfgs.types.default.enabled }}
  - name: sa-default-kubeconfig
    preconditions:
      all: {{- include "internal.kubeconfigs.generator-preconditions" $ | nindent 6 }}
      - key: {{ include "kyverno-policies.printTpl" (printf "%s || 'default'" $request_type) }}
        operator: Equals
        value: "default"
    match:
      any:
      - resources:
          kinds:
          - "Secret"
    generate:
      synchronize: {{ $cfgs.synchronize }}
      apiVersion: v1
      kind: Secret
      name: {{ include "kyverno-policies.printTpl" (printf "%s || join('-', [request.object.metadata.name,'kubeconfig'])" $request_name) }}
      {{- if $cfgs.allowSecretsInOtherNamespace }}
      namespace: {{ include "kyverno-policies.printTpl" (printf "%s || request.object.metadata.namespace" $request_namespace) }}
      {{- else }}
      namespace: {{ include "kyverno-policies.printTpl" "request.object.metadata.namespace" }}
      {{- end }}
      data:
        metadata:
        {{- if $cfgs.createOwnerReference }}
          ownerReferences:
          - apiVersion: v1
            kind: Secret
            name: {{ include "kyverno-policies.printTpl" "request.object.metadata.name" }}
            uid: {{ include "kyverno-policies.printTpl" "request.object.metadata.uid" }}
        {{- end }}
        stringData:        
          config: |
            apiVersion: v1
            clusters:
            - cluster:
                certificate-authority-data: {{ include "kyverno-policies.printTpl" "request.object.data.ca.crt | base64_decode(@)" }}
                server: {{ $cfgs.internal }}
              name: default
            contexts:
            - context:
                cluster: default
                user: default
              name: default
            current-context: default
            kind: Config
            preferences: {}
            users:
            - name: default
              user:
                token: {{ include "kyverno-policies.printTpl" "request.object.data.token" }}
    {{- end }}

    # Create Kubeconfigs based on ServiceAccount Token Secrets
    {{- if $cfgs.types.argocd.enabled }}
  - name: sa-argo-generator
    preconditions:
      all: {{- include "internal.kubeconfigs.generator-preconditions" $ | nindent 6 }}
      - key: {{ include "kyverno-policies.printTpl" (printf "%s || ''" $request_type) }}
        operator: Equals
        value: "argocd"
    match:
      any:
      - resources:
          kinds:
          - "Secret"
    generate:
      synchronize: {{ $cfgs.synchronize }}
      apiVersion: v1
      kind: Secret
      name: {{ include "kyverno-policies.printTpl" (printf "%s || join('-', [request.object.metadata.name,'argocd'])" $request_name) }}
      {{- if $cfgs.allowSecretsInOtherNamespace }}
      namespace: {{ include "kyverno-policies.printTpl" (printf "%s || {{ $cfgs.argocd.defaultNamespace }}" $request_namespace) }}
      {{- else }}
      namespace: {{ include "kyverno-policies.printTpl" "request.object.metadata.namespace" }}
      {{- end }}
      data:
        metadata:
        {{- if $cfgs.createOwnerReference }}
          ownerReferences:
          - apiVersion: v1
            kind: Secret
            name: {{ include "kyverno-policies.printTpl" "request.object.metadata.name" }}
            uid: {{ include "kyverno-policies.printTpl" "request.object.metadata.uid" }}
        {{- end }}
        stringData:
          name: {{ include "kyverno-policies.printTpl" (printf "%s || join('-', [request.object.metadata.name,request.object.metadata.namespace,'argocd'])" $request_name) }}
          server: {{ $cfgs.internal }}
          config: |
            {
              "bearerToken": {{ include "kyverno-policies.printTpl" "request.object.data.token" }},
              "tlsClientConfig": {
                "insecure": false,
                "caData": {{ include "kyverno-policies.printTpl" "request.object.data.token" }}
              }
            }
    {{- end }}

    {{- range $cfgs.types.custom_endpoints }}
  - name: sa-{{ required "Name is required for custom endpoint" .name }}-generator
      {{- if not (.skipVerify) }}
    context:
    - name: ca_certificate
      apiCall:
        urlPath: "/api/v1/namespaces/{{ .caSecretNamespace }}/secrets/{{ .caSecretName }}"
        jmesPath: "data.\"{{ default .caSecretKey "ca.crt" }}\" || ''" 
      {{- end }}
    preconditions:
      all: {{- include "internal.kubeconfigs.generator-preconditions" $ | nindent 6 }}
      - key: {{ include "kyverno-policies.printTpl" (printf "%s || ''" $request_type) }}
        operator: Equals
        value: "{{ .name }}"
      {{- if not (.skipVerify) }}
      - key: {{ include "kyverno-policies.printTpl" "ca_certificate" }}
        operator: Exists
      {{- end }}
    match:
      any:
      - resources:
          kinds:
          - "Secret"
    generate:
      synchronize: {{ $cfgs.synchronize }}
      apiVersion: v1
      kind: Secret
      name: {{ include "kyverno-policies.printTpl" (printf "%s || join('-', [request.object.metadata.name,'{{ .name }}'])" $request_name) }}
      {{- if $cfgs.allowSecretsInOtherNamespace }}
      namespace: {{ include "kyverno-policies.printTpl" (printf "%s || request.object.metadata.namespace" $request_namespace) }}
      {{- else }}
      namespace: {{ include "kyverno-policies.printTpl" "request.object.metadata.namespace" }}
      {{- end }}
      data:
        metadata:
        {{- if $cfgs.createOwnerReference }}
          ownerReferences:
          - apiVersion: v1
            kind: Secret
            name: {{ include "kyverno-policies.printTpl" "request.object.metadata.name" }}
            uid: {{ include "kyverno-policies.printTpl" "request.object.metadata.uid" }}
        {{- end }}
        stringData:        
          config: |
            apiVersion: v1
            clusters:
            - cluster:
                {{- if .skipVerify }}
                insecure-skip-tls-verify: true
                {{- else }}
                certificate-authority-data: {{ include "kyverno-policies.printTpl" "ca_certificate" }}
                {{- end }}
                server: {{ .server }}
              name: default
            contexts:
            - context:
                cluster: default
                user: default
              name: default
            current-context: default
            kind: Config
            preferences: {}
            users:
            - name: default
              user:
                token: {{ include "kyverno-policies.printTpl" "request.object.data.token" }}
    {{- end }}
  {{- end }}
{{- end }}